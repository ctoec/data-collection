/* tslint:disable */
/* eslint-disable */
/**
 * data-collection
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Child,
  ChildFromJSON,
  ChildFromJSONTyped,
  ChildToJSON,
  IncomeDetermination,
  IncomeDeterminationFromJSON,
  IncomeDeterminationFromJSONTyped,
  IncomeDeterminationToJSON,
  Organization,
  OrganizationFromJSON,
  OrganizationFromJSONTyped,
  OrganizationToJSON,
  UpdateMetaData,
  UpdateMetaDataFromJSON,
  UpdateMetaDataFromJSONTyped,
  UpdateMetaDataToJSON,
} from './';

/**
 *
 * @export
 * @interface Family
 */
export interface Family {
  /**
   *
   * @type {number}
   * @memberof Family
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Family
   */
  addressLine1?: string;
  /**
   *
   * @type {string}
   * @memberof Family
   */
  addressLine2?: string;
  /**
   *
   * @type {string}
   * @memberof Family
   */
  town?: string;
  /**
   *
   * @type {string}
   * @memberof Family
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Family
   */
  zip?: string;
  /**
   *
   * @type {boolean}
   * @memberof Family
   */
  homelessness?: boolean;
  /**
   *
   * @type {Array<IncomeDetermination>}
   * @memberof Family
   */
  incomeDeterminations?: Array<IncomeDetermination>;
  /**
   *
   * @type {Array<Child>}
   * @memberof Family
   */
  children?: Array<Child>;
  /**
   *
   * @type {Organization}
   * @memberof Family
   */
  organization?: Organization;
  /**
   *
   * @type {UpdateMetaData}
   * @memberof Family
   */
  updateMetaData?: UpdateMetaData;
}

export function FamilyFromJSON(json: any): Family {
  return FamilyFromJSONTyped(json, false);
}

export function FamilyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Family {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    addressLine1: !exists(json, 'addressLine1')
      ? undefined
      : json['addressLine1'],
    addressLine2: !exists(json, 'addressLine2')
      ? undefined
      : json['addressLine2'],
    town: !exists(json, 'town') ? undefined : json['town'],
    state: !exists(json, 'state') ? undefined : json['state'],
    zip: !exists(json, 'zip') ? undefined : json['zip'],
    homelessness: !exists(json, 'homelessness')
      ? undefined
      : json['homelessness'],
    incomeDeterminations: !exists(json, 'incomeDeterminations')
      ? undefined
      : (json['incomeDeterminations'] as Array<any>).map(
          IncomeDeterminationFromJSON
        ),
    children: !exists(json, 'children')
      ? undefined
      : (json['children'] as Array<any>).map(ChildFromJSON),
    organization: !exists(json, 'organization')
      ? undefined
      : OrganizationFromJSON(json['organization']),
    updateMetaData: !exists(json, 'updateMetaData')
      ? undefined
      : UpdateMetaDataFromJSON(json['updateMetaData']),
  };
}

export function FamilyToJSON(value?: Family | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    addressLine1: value.addressLine1,
    addressLine2: value.addressLine2,
    town: value.town,
    state: value.state,
    zip: value.zip,
    homelessness: value.homelessness,
    incomeDeterminations:
      value.incomeDeterminations === undefined
        ? undefined
        : (value.incomeDeterminations as Array<any>).map(
            IncomeDeterminationToJSON
          ),
    children:
      value.children === undefined
        ? undefined
        : (value.children as Array<any>).map(ChildToJSON),
    organization: OrganizationToJSON(value.organization),
    updateMetaData: UpdateMetaDataToJSON(value.updateMetaData),
  };
}
