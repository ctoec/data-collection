/* tslint:disable */
/* eslint-disable */
/**
 * data-collection
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Enrollment,
    EnrollmentFromJSON,
    EnrollmentFromJSONTyped,
    EnrollmentToJSON,
    FundingSource,
    FundingSourceFromJSON,
    FundingSourceFromJSONTyped,
    FundingSourceToJSON,
    FundingTimeSplitUtilization,
    FundingTimeSplitUtilizationFromJSON,
    FundingTimeSplitUtilizationFromJSONTyped,
    FundingTimeSplitUtilizationToJSON,
    Organization,
    OrganizationFromJSON,
    OrganizationFromJSONTyped,
    OrganizationToJSON,
    ReportingPeriod,
    ReportingPeriodFromJSON,
    ReportingPeriodFromJSONTyped,
    ReportingPeriodToJSON,
} from './';

/**
 * 
 * @export
 * @interface CdcReport
 */
export interface CdcReport {
    /**
     * 
     * @type {boolean}
     * @memberof CdcReport
     */
    accredited: boolean;
    /**
     * 
     * @type {number}
     * @memberof CdcReport
     */
    c4KRevenue: number;
    /**
     * 
     * @type {boolean}
     * @memberof CdcReport
     */
    retroactiveC4KRevenue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CdcReport
     */
    familyFeesRevenue: number;
    /**
     * 
     * @type {string}
     * @memberof CdcReport
     */
    comment?: string;
    /**
     * 
     * @type {Array<FundingTimeSplitUtilization>}
     * @memberof CdcReport
     */
    timeSplitUtilizations?: Array<FundingTimeSplitUtilization>;
    /**
     * 
     * @type {number}
     * @memberof CdcReport
     */
    organizationId: number;
    /**
     * 
     * @type {Organization}
     * @memberof CdcReport
     */
    organization?: Organization;
    /**
     * 
     * @type {number}
     * @memberof CdcReport
     */
    id: number;
    /**
     * 
     * @type {FundingSource}
     * @memberof CdcReport
     */
    type?: FundingSource;
    /**
     * 
     * @type {number}
     * @memberof CdcReport
     */
    reportingPeriodId: number;
    /**
     * 
     * @type {ReportingPeriod}
     * @memberof CdcReport
     */
    reportingPeriod: ReportingPeriod;
    /**
     * 
     * @type {Date}
     * @memberof CdcReport
     */
    submittedAt?: Date;
    /**
     * 
     * @type {Array<Enrollment>}
     * @memberof CdcReport
     */
    enrollments?: Array<Enrollment>;
}

export function CdcReportFromJSON(json: any): CdcReport {
    return CdcReportFromJSONTyped(json, false);
}

export function CdcReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): CdcReport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accredited': json['accredited'],
        'c4KRevenue': json['c4KRevenue'],
        'retroactiveC4KRevenue': !exists(json, 'retroactiveC4KRevenue') ? undefined : json['retroactiveC4KRevenue'],
        'familyFeesRevenue': json['familyFeesRevenue'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'timeSplitUtilizations': !exists(json, 'timeSplitUtilizations') ? undefined : ((json['timeSplitUtilizations'] as Array<any>).map(FundingTimeSplitUtilizationFromJSON)),
        'organizationId': json['organizationId'],
        'organization': !exists(json, 'organization') ? undefined : OrganizationFromJSON(json['organization']),
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : FundingSourceFromJSON(json['type']),
        'reportingPeriodId': json['reportingPeriodId'],
        'reportingPeriod': ReportingPeriodFromJSON(json['reportingPeriod']),
        'submittedAt': !exists(json, 'submittedAt') ? undefined : (new Date(json['submittedAt'])),
        'enrollments': !exists(json, 'enrollments') ? undefined : ((json['enrollments'] as Array<any>).map(EnrollmentFromJSON)),
    };
}

export function CdcReportToJSON(value?: CdcReport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accredited': value.accredited,
        'c4KRevenue': value.c4KRevenue,
        'retroactiveC4KRevenue': value.retroactiveC4KRevenue,
        'familyFeesRevenue': value.familyFeesRevenue,
        'comment': value.comment,
        'timeSplitUtilizations': value.timeSplitUtilizations === undefined ? undefined : ((value.timeSplitUtilizations as Array<any>).map(FundingTimeSplitUtilizationToJSON)),
        'organizationId': value.organizationId,
        'organization': OrganizationToJSON(value.organization),
        'id': value.id,
        'type': FundingSourceToJSON(value.type),
        'reportingPeriodId': value.reportingPeriodId,
        'reportingPeriod': ReportingPeriodToJSON(value.reportingPeriod),
        'submittedAt': value.submittedAt === undefined ? undefined : (value.submittedAt.toISOString()),
        'enrollments': value.enrollments === undefined ? undefined : ((value.enrollments as Array<any>).map(EnrollmentToJSON)),
    };
}


