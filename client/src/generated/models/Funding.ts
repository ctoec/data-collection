/* tslint:disable */
/* eslint-disable */
/**
 * data-collection
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Enrollment,
  EnrollmentFromJSON,
  EnrollmentFromJSONTyped,
  EnrollmentToJSON,
  FundingSpace,
  FundingSpaceFromJSON,
  FundingSpaceFromJSONTyped,
  FundingSpaceToJSON,
  ReportingPeriod,
  ReportingPeriodFromJSON,
  ReportingPeriodFromJSONTyped,
  ReportingPeriodToJSON,
  UpdateMetaData,
  UpdateMetaDataFromJSON,
  UpdateMetaDataFromJSONTyped,
  UpdateMetaDataToJSON,
} from './';

/**
 *
 * @export
 * @interface Funding
 */
export interface Funding {
  /**
   *
   * @type {number}
   * @memberof Funding
   */
  id: number;
  /**
   *
   * @type {Enrollment}
   * @memberof Funding
   */
  enrollment: Enrollment;
  /**
   *
   * @type {FundingSpace}
   * @memberof Funding
   */
  fundingSpace: FundingSpace;
  /**
   *
   * @type {ReportingPeriod}
   * @memberof Funding
   */
  firstReportingPeriod?: ReportingPeriod;
  /**
   *
   * @type {ReportingPeriod}
   * @memberof Funding
   */
  lastReportingPeriod?: ReportingPeriod;
  /**
   *
   * @type {UpdateMetaData}
   * @memberof Funding
   */
  updateMetaData?: UpdateMetaData;
}

export function FundingFromJSON(json: any): Funding {
  return FundingFromJSONTyped(json, false);
}

export function FundingFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Funding {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    enrollment: EnrollmentFromJSON(json['enrollment']),
    fundingSpace: FundingSpaceFromJSON(json['fundingSpace']),
    firstReportingPeriod: !exists(json, 'firstReportingPeriod')
      ? undefined
      : ReportingPeriodFromJSON(json['firstReportingPeriod']),
    lastReportingPeriod: !exists(json, 'lastReportingPeriod')
      ? undefined
      : ReportingPeriodFromJSON(json['lastReportingPeriod']),
    updateMetaData: !exists(json, 'updateMetaData')
      ? undefined
      : UpdateMetaDataFromJSON(json['updateMetaData']),
  };
}

export function FundingToJSON(value?: Funding | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    enrollment: EnrollmentToJSON(value.enrollment),
    fundingSpace: FundingSpaceToJSON(value.fundingSpace),
    firstReportingPeriod: ReportingPeriodToJSON(value.firstReportingPeriod),
    lastReportingPeriod: ReportingPeriodToJSON(value.lastReportingPeriod),
    updateMetaData: UpdateMetaDataToJSON(value.updateMetaData),
  };
}
