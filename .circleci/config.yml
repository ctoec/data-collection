version: 2.1

orbs:
  node: circleci/node@4.0.0

jobs:
  pull:
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  install:
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - node/install-packages:
          pkg-manager: yarn
          cache-path: node_modules
      - node/install-packages:
          pkg-manager: yarn
          app-dir: ./client
          cache-path: node_modules
          override-ci-command: yarn install --frozen-lockfile --network-concurrency 1
      # Save workspace for subsequent jobs
      - persist_to_workspace:
          root: .
          paths:
            - .
  build:
    parameters:
      env:
        description: 'The environment to deploy Fawkes to (qa, devsecure, staging)'
        type: string
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build Express server
          command: yarn build
      - run:
          working_directory: client
          name: Build React app
          # move server node_modules so they don't interfere with preflight checks for the client node_modules
          # (yarn looks for node_modules in parent directories)
          command: mv ../node_modules ../IGNORE && CI="" REACT_APP_STAGE="<< parameters.env >>" yarn build && mv ../IGNORE ../node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    environment:
      # https://support.circleci.com/hc/en-us/articles/360009208393-How-can-I-increase-the-max-memory-for-Node-
      NODE_OPTIONS: --max-old-space-size=4096
      
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run npm audit for back-end dependencies
          command: yarn audit
      - run:
          name: Run npm audit for front-end dependencies
          command: cd client && yarn audit
      - run:
          name: Run back-end tests
          command: yarn run test
      - run:
          name: Run front-end tests
          working_directory: client
          # skip pre-flight checks to avoid the parent-directory node_module issues
          command: SKIP_PREFLIGHT_CHECK=true yarn run test
  deploy:
    description: 'Job for deploying Fawkes to the specified environment'
    parameters:
      env:
        description: 'The environment to deploy Fawkes to (qa, devsecure, staging)'
        type: string
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Elastic Beanstalk CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip3 install awsebcli
      - run:
          name: Initialize Elastic Beanstalk
          command: eb init ece-fawkes-<< parameters.env >>-app --region us-east-2 --platform node.js
      - run:
          name: Deploy to Elastic Beanstalk environment
          command: eb deploy ece-fawkes-<< parameters.env >>-env
  e2e_test:
    description: 'Run e2e tests against a deployed pre-prod env'
    parameters:
      env:
        description: 'The environment to run e2e tests against (qa, devsecure, staging)'
        type: string
    docker:
      - image: 906392371336.dkr.ecr.us-east-2.amazonaws.com/oec/node:12
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup environment variables
          command: |
            echo "export API_TEST_HOST=https://<<parameters.env>>.ece-fawkes.ctoecskylight.com" >> $BASH_ENV
            echo "export LAUNCH_URL=<https://<<parameters.env>>.ece-fawkes.ctoecskylight.com" >> $BASH_ENV
      - run:
          working_directory: e2e-tests
          name: Install e2e test dependencies
          command: yarn
      - run:
          working_directory: e2e-tests
          name: Run e2e tests (in chrome)
          command: yarn test
      - run:
          working_directory: client
          name: Run api integration tests
          command: SKIP_PREFLIGHT_CHECK=true yarn test-integration

workflows:
  local-tests:
    jobs:
      - pull
      - install:
          requires:
            - pull
      - build:
          env: staging
          requires:
            - install
      - test:
          requires:
            - build
  e2e-tests:
    jobs:
      - hold:
          type: approval
      - install:
          requires:
            - hold
      - build:
          env: qa
          requires:
            - install
      - deploy:
          env: qa
          requires:
            - build
      - e2e_test:
          env: qa
          requires:
            - deploy

  deploy-to-staging:
    jobs:
      - pull
      - hold:
          type: approval
          filters:
              branches:
                ignore:
                  - remove-extra-deploy-workflow
      - install:
          requires:
            - hold
            - pull
      - build:
          env: staging
          requires:
            - install
      - deploy:
          env: staging
          requires:
            - build
      - e2e_test:
          env: staging
          requires:
            - deploy
          filters:
              branches:
                only:
                  - remove-extra-deploy-workflow
  deploy-to-qa:
    jobs:
      - pull
      - hold:
          type: approval
      - install:
          requires:
            - hold
            - pull
      - build:
          env: qa
          requires:
            - install
      - deploy:
          env: qa
          requires:
            - build
  deploy-to-devsecure:
    jobs:
      - pull
      - hold:
          type: approval
          filters:
              branches:
                ignore:
                  - remove-extra-deploy-workflow
      - install:
          requires:
            - hold
            - pull
      - build:
          env: devsecure
          requires:
            - install
      - deploy:
          env: devsecure
          requires:
            - build
  deploy-to-prod:
    jobs:
      - pull
      - hold:
          type: approval
      - install:
          requires:
            - hold
            - pull
      - build:
          env: prod
          requires:
            - install
      - prod-check:
          type: approval
          requires:
            - build
      - deploy:
          env: prod
          requires:
            - prod-check
